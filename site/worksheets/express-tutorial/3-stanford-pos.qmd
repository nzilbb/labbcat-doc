---
format:
  html:
    toc: true
  pdf: 
    toc: false
    fontfamily: linguisticspro
---
<!-- 3:35-3:42 (then slow download) 7 minutes -->
<!-- 3:51-3:56 5 minutes - total 12 minutes -->
<!-- TODO an alternative to this worksheet if downloading the POS tagger fails -->
<!-- TODO OR have a local copy of the file that participants can provide manually -->
<!-- TODO also available at https://repo.clojars.org/stanford-postagger/stanford-postagger/3.1.3/stanford-postagger-3.1.3.jar -->
# Part of Speech Tags

LaBB-CAT can be integrated with the 
[Stanford POS Tagger](https://nlp.stanford.edu/software/tagger.shtml), 
which is free software developed by The Stanford Natural Languages Processing Group
for tagging words in various languages with their parts of speech.

In this exercise you will:

1.  install the Stanford POS Tagger layer manager module, and
2.  use it to tag each word with its part of speech.

## Install the Stanford POS Tagger

The first thing we're going to do is install the Stanford POS Tagger layer manager, 
which is a LaBB-CAT module that integrates with the Stanford NLP Group's software...

(@) In LaBB-CAT, select the *layer managers* menu option.\
    You will see a list of pre-installed layer managers, which are
    modules that can perform automatic annotation tasks. 
    The Stanford POS Tagger layer manager isn't pre-installed, 
    because it is language-specific, and requires installation of further software.
(@) Near the bottom of the page there a link labelled:\
    *List of layer managers that are not yet installed* -- click it.
(@) Find *Stanford POS Tagger* in the list, and press its *Install* button.
(@) Press *Install* on the resulting information page.\
    This displays some further information about the layer manager,
    allowing you to optionally upload an alternative version of Stanford's software.\
    We won't upload a file, we'll be using the standard file that is included in the layer
    manager.
(@) Press *Configure*.\
    You will see a progress bar while the layer manager downloads the software
    from the Stanford website. This will take a minute or so.
(@) Once it's finished, you will see a new window open with information
    about the Stanford POS Tagger layer manager.
    
## Annotate Words with Part of Speech tags    
    
Now that we've installed the layer manager, we'll create an annotation layer
that tags words with their pronunciations.

(@) Select the *word layers* option on the menu.\
    You will see a list of existing word layers, including the
    *orthography* layer, the *lexical* layer, etc.
(@) The column headings are also a form for defining a new word layer.
    Fill in the following details in this form:
    -   **Layer ID:** `pos`
    -   **Type:** *Text*
    -   **Alignment:** *Intervals*
    -   **Manager:** *Stanford POS Tagger*
    -   **Description:** `Part of Speech tag(s) according to the Stanford POS Tagger.`
(@) Press *New* to add the layer.\
    You will see the layer configuration form.

There are some word tokens we want the POS tagger to ignore:

- filled pauses like "um", "ah", and "mm", and
- half-finished words that the speaker interrupted before completing the full word - these are transcribed with 
  a `~` at the end of the word, e.g. if the speaker started saying "noise" but changed their mind before the end 
  of the word, this might be transcribed as "noi~".

This is what the *Token Exclusion Pattern* setting is for; it's a regular expression that identified words that 
should be excluded from part-of-speech tagging.

(@) Set the *Token Exclusion Pattern* to be:\
    `um|ah|mm|.*~`

:::{.callout-tip}
![](help-3.png) If you're curious about what the configuration
options do, hover your mouse over each one to see further
information about what the setting does.
:::

(@) Press *Set Parameters*.\
    You will see a message asking you if you want (re)generate the layer
    data now.
(@) Press *Regenerate*.\
    You will see a progress bar moving across the page while the annotations are being generated. 
    This will probably take a minute or so.\
    When it is finished, you will see a message saying *Finished*.
(@) Select the *transcripts* menu option, 
    and open the first transcript in the list by clicking the transcript name.
(@) Select the *Layers* tab at the top to reveal a list of tickable annotation layers.
(@) Tick your new *pos* layer.

You'll see that each word is now tagged with at least on part-of-speech tag. Some words will have multiple tags, for example "I've" includes 

 - a `PRP` (personal pronoun) and 
 - a `VBP` (present-tense verb).

These tags (like any annotations in LaBB-CAT) can be searched, extracted, and analysed.

<!-- TODO invent a quick but interesting search? Or maybe use it for LIWC?
{{< pagebreak >}}

## Search Across Layers

(@) Select the *search* option on the menu, which allows you to search
    all participants by default.
(@) Tick the new *pos* layer.\
    Now you will see that our search matrix is two layers high by one
    word wide.\
    ![](two-layers-high.png){title="The search matrix shows a frame labelled 'orthography' above and a frame labelled 'cmudict' below, both with a 'matches' dropdown box and an empty 'Regular expression' box. The 'phonemes' frame also includes a button to the right of the regular expression box"}
(@) Search your new *pos* layer for words that start with "h" by
    entering `h.*` (i.e. "h" followed by zero or more characters) in the *pos* box.

You will see that the results contain words that you might not expect, like "where", "which" and "when".

(@) Click one of these unexpected results, to open the transcript.\
    You will see that, in the transcript, the pronunciation appears to
    start with /w/, not with /h/.
(@) Click on the word and select the bottom *Edit* option on the menu
    that appears.\
    This opens a small window that displays all annotations on that word
    token.
(@) Now look for the *cmudict* layer. You will see that, in addition to
    the pronunciation that starts with /w/, there's another annotation
    that starts with /h/, which is invisible on the transcript.
    
These are all the possible phonemic transcriptions for the word, 
in the order they are found in the CMUdict dictionary file. 
Only the first one is displayed in the transcript, 
but when you do searches, all of them are searched. This
can result in unexpected matches like this, but it can be useful, as
it ensures that when you search for a particular phonemic pattern,
all possible tokens are returned, not just those that match on the
most 'normal' transcription.

Now we are going to search a multi-word, multi-laye pattern:
"the" followed by a word starting with a vowel...

(@)  Go to the *search* page.
(@) Create a search matrix that's two words wide by pressing the ![](add.svg){style="height:15px;"} button, and tick the
    *orthography* and *cmudict* layers.
(@) Type `the` in the first *orthography* box.
(@) Click the second box on the *cmudict* layer, but don't enter
    anything in the box yet.\
    The box has a ![](collapse-down.svg){style="height:15px;"} button to the right of it.
(@) Hover the mouse over the button to see what it says, and then click it.

You will see that a section opens with a bunch of phoneme symbols on it; clicking on a phoneme 
adds its CELEX DISC representation to the search box.

In a regular expression, to match several single-letter symbols at once, 
you need to enclose the symbols in parentheses `[]`.

For example, to match *either* the KIT vowel -- `I` in DISC -- *or* the FLEECE vowel -- `i` in DISC, 
you would need a regular expression like this:\
`[Ii]`

We want to match *any vowel at all* at the beginning of this second word, 
so you need to construct a regular expression for that.

You could use the square-brackets `[` at the start of your pattern,
and click each of the vowel symbols to add all possible vowels -- you should add in all the vowels you see in the list that
appears when you expand the IPA helper, including all the
diphthongs. Finally, you would need to add the closing square bracket `]`.

*Alternatively*, you can simply click the *VOWEL* link in the
'phoneme symbol selector', which will add all the DISC vowels for
you, already enclosed in square-brackets.

(@) Enter the regular expression to match any vowel, using either of the methods just mentioned.
(@) Be sure to append your 'any vowel' regular expression with `.*` to ensure the search 
    matches words that have phonemes after the initial vowel.

:::{.callout-tip}
Some regular expressions are so long that not all of the expression is visible in the text box.
You can see the whole expression by hovering your mouse over the text box.
:::

(@) Run the search and check that it's giving you what you expect.
    Notice that now there are no 'false positives' like "the one" that
    we might get if we searched using orthographic spelling only.

Now that you've generated an annotation layer, and have seen how the search matrix works, 
you might want to try out some of the searches listed below, or invent some others:

:::{.callout-tip}
If you need help with creating regular expressions, try the online help page, 
which is accessible via the help icon ![](help-1.png) at the top right of the page.
:::

-   Words which have the DRESS vowel as the second phoneme
-   Words ending with a front vowel, followed by words beginning with
    /p/ or /b/
-   Words that begin with "k" in their spelling, but begin with the
    phoneme /n/
-   Words that begin with "k" in their spelling, but *do not* begin with the
    phoneme /n/


-->